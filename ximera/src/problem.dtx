%    \begin{macrocode}
%<*classXimera>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%  	Make Counter Command  	%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Improved version of \newcounter to check for existance before
% creating a counter to minimize conflicts with packages.  Added by
% Jason Nowell

\newcommand{\Make@Counter}[1]{
  \@ifundefined{c@#1}% Check to see if counter exists
	       {     % If not, create it and set it to 0.
		\newcounter{#1}
		\setcounter{#1}{0}
		}
		{%If so, reset to 0.
		\setcounter{#1}{0}
		}
}



\newcommand{\latexProblemContent}[1]{#1} %% Added for those that want
                                         %% to use UF problems without
                                         %% using the problem filter
                                         %% code. This command is
                                         %% renewed into something
                                         %% meaningful in the
                                         %% 'ProblemSelector.sty'.
\Make@Counter{Iteration@probCnt}         %%  Iterate count for problem
                                         %%  counts.






%%%%%% Configure environment configuration commands

% The command \problemNumber contains all the format code to determine the number (and the format of the number) for any of the problem environments.
\newcommand{\problemNumber}{

% First we determine if we have a counter for this question depth level.
% -- Can probably replace this with Make@Counter at some point -- Jason

\ifcsname c@depth\Roman{problem@Depth}Count\endcsname	% Check to see if counter exists
	%If so, do nothing.
	\else
	%If not, create it.
	\expandafter\newcounter{depth\Roman{problem@Depth}Count}
	\expandafter\setcounter{depth\Roman{problem@Depth}Count}{0}
	\fi

\expandafter\stepcounter{depth\Roman{problem@Depth}Count}
\arabic{depthICount}% The first problem depth, what use to be "\theproblem".
\forloop{Iteration@probCnt}{2}{\arabic{Iteration@probCnt} < \numexpr \value{problem@Depth} + 1 \relax}{%
.\expandafter\arabic{depth\Roman{Iteration@probCnt}Count}% Get the problem number of the next depth level and append it with a ".".
}
%\ifhandout % Currently handout mode doesn't allow hints. Putting this code in place in case that changes.
%	\theproblem 
%\else
%	\theproblem 
%\fi
}



%%%%%% Configure various problem environment commands
\Make@Counter{problem@Depth}



%%%% Configure environments start content

\newcommand{\problemEnvironmentStart}[2]{%
% This takes in 2 arguments. 
% The first is optional and is the old optional argument from existing environments. 
%	This is passed down to the associated problem environment name in case you want a global value.
% The second argument is mandatory and is the name of the 'problem' environment, 
%	such as problem, question, exercise, etc. 
% It then configures everything needed at the start of that environment.

\stepcounter{problem@Depth}% Started a problem, so we've sunk another problem layer.
\def\spaceatend{#1}%
\begin{trivlist}%
\item%
  [%
	\hskip\labelsep\sffamily\bfseries% 
	#2%
	\problemNumber% Determine the correct number of the problem, and the format of that number.
	]
\slshape
}



%%%%% Configure environments end content

\newcommand{\problemEnvironmentEnd}{%This configures all the end content for a problem.
%
% First we need to see if we've dropped fully out of a depth level, 
% so we can reset that counter back to zero for the next time we enter that depth level.
\stepcounter{problem@Depth}
\ifcsname c@depth\Roman{problem@Depth}Count\endcsname
	\expandafter\ifnum\expandafter\value{depth\Roman{problem@Depth}Count}>0
		\expandafter\setcounter{depth\Roman{problem@Depth}Count}{0}
	\fi
\fi

\addtocounter{problem@Depth}{-2}% Exited a problem so we've exited a problem layer. Need -2 because we steppped once at the start to check for needing a depth-level count reset. 

\par\addvspace{.5ex}\nobreak\noindent\hung %% line at the bottom

\ifhandout
	\ifnewpage
		\newpage
	\fi
\fi 
\end{trivlist}
}



%%%% Now populate the old environment names
%
% Old environments were "problem", "exercise", "exploration", and "question".
% Note that you can add content to the start/end code on top of these base code pieces if you want.


\newenvironment{problem}[1][2in]%
{%Env start code
\problemEnvironmentStart{#1}{Problem}
}
{%Env end code
\problemEnvironmentEnd
}

\newenvironment{exercise}[1][2in]%
{%Env start code
\problemEnvironmentStart{#1}{Exercise}
}
{%Env end code
\problemEnvironmentEnd
}

\newenvironment{exploration}[1][2in]%
{%Env start code
\problemEnvironmentStart{#1}{Exploration}
}
{%Env end code
\problemEnvironmentEnd
}

\newenvironment{question}[1][2in]%
{%Env start code
\problemEnvironmentStart{#1}{Question}
}
{%Env end code
\problemEnvironmentEnd
}
%</classXimera>
%    \end{macrocode}
