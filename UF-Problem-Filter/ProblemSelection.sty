\ProvidesPackage{ProblemSelection}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%				Necessary Counters					%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcounter{Iteration@1}
\newcounter{Iteration@2}
\newcounter{Iteration@3}
\newcounter{Iteration@4}
\newcounter{Rnd@Quant}
\newcounter{Rnd@EndQuant}
\newcounter{Temp@1}
\newcounter{Temp@2}
\newcounter{Temp@3}
%\newcounter{LogicChecks}
%\setcounter{LogicChecks}{0}
\newcounter{Given@ProblemNumber}
\newcounter{Problem@ToList}
\newcounter{Problem@RemainToCheck}
\newcounter{Last@Question}
\setcounter{Last@Question}{0}
\newcounter{Question@CurNumber}
\setcounter{Question@CurNumber}{0}
\newcounter{Question@DisplayCounter}
\setcounter{Question@DisplayCounter}{0}
\newcounter{Default@genUniqueNum}
\setcounter{Default@genUniqueNum}{0}
\newcounter{Placement@1}
\setcounter{Placement@1}{1}
\newcounter{Problem@TotalToList}
\setcounter{Problem@TotalToList}{0}
\newcounter{Problem@GroupingNumber}
\setcounter{Problem@GroupingNumber}{1}
\newcounter{Problem@Range}
\newcounter{Problem@EndRef}
\setcounter{Problem@EndRef}{1}
\newcounter{Problem@NextRef}


\newif\iffindingQuestion
\findingQuestionfalse

\newif\ifquestionCount
\questionCounttrue

\newif\ifquestionPull
\questionPullfalse

\newif\ifPerFileQ
\PerFileQfalse

\newif\ifproblemToFind
\problemToFindfalse

\newif\ifveryVerbose
\veryVerbosefalse

\newcommand{\QBank@loc}{/home/jason/texmf/tex/Questions/}

\newcommand{\select@Question}[1]{
\ifVerbose 
	\ifquestionCount 
		We called the file #1 to find problem counts!\\ 
	\else
		We called the file #1, this time to find problems!\\
	\fi	
\fi
\input{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%			Track Question Number and Content		%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




\newcommand{\latexProblemContent}[1]{%
	\stepcounter{Question@CurNumber}% We're checking a new question.
	\ifveryVerbose We are checking problem \arabic{Question@CurNumber}. \\ \fi
	\ifnum\value{Problem@RemainToCheck}>1% Only bother to keep looking if there are more problems to look for

		\ifVerbose	
		Registered the last question to be: \arabic{Problem@ToList}\\
		Registered the Current question to be: \arabic{Question@CurNumber}\\
		\fi
	
%	\forloop{Iteration@1}{1}{\arabic{Iteration@1} < \arabic{Problem@RemainToCheck}}
%		{
		\ifVerbose Looking for question \arabic{Problem@NextRef}.\\ \fi

		\ifnum\value{Question@CurNumber}=\value{Problem@NextRef}% Check to see if the question we're currently on, is one of the questions in the list of questions we are after (contained in Question@Location Values)
			\ifVerbose I think I found question \arabic{Problem@NextRef} so I am assigning a new command now.\\ \fi
			\stepcounter{Question@DisplayCounter}% We found a displayable question.
			\expandafter\newcommand\csname Question@Display\roman{Problem@GroupingNumber}\Roman{Question@DisplayCounter}\endcsname{% If so, we want to define the next Question in the list to display to be this questions' content. That way we can call it later.
			#1
			}
			\ifVerbose I assigned the command to be Question@Display\roman{Problem@GroupingNumber}\Roman{Question@DisplayCounter} in theory.\\ \fi
			\addtocounter{Problem@RemainToCheck}{-1}% Decrement the total number of questions to look for since we found one. This will only work because the questions are given in *reverse* numeric order.
			\addtocounter{Problem@EndRef}{-1}% Decrement the End Pointer as well.
			\ifnum\value{Problem@EndRef}>0% If there are more questions to look for, set the next one.
				\ifVerbose I think found and properly assigned question \arabic{Problem@NextRef}\\ \fi
				\setcounter{Problem@NextRef}{\arabic{Question@Location\Roman{Problem@EndRef}}}
				\ifVerbose Now I'm looking for problem \arabic{Problem@NextRef}\\ \fi
			\fi
		\fi% If it's not on the list, we ignore it.
%		}
	\fi
	\ifveryVerbose
		The current problem is \arabic{Question@CurNumber}.\\
		The Current number of remaining problems is \arabic{Problem@EndRef}.\\
		The next problem to find is \arabic{Problem@NextRef}.\\
		\fi
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%					Filter Questions 				%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%					Header and Foooter 				%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\ProblemFileHeader}[1]{%
\ifquestionCount
\addtocounter{Total@Question}{#1}
\fi
\ifPerFileQ
	\setcounter{Total@Question}{#1}
	\questionPulltrue
		\ifVerbose We should now be Pulling Questions (questionPulltrue)\\ \fi
	\addtocounter{Problem@ToList}{\arabic{Given@ProblemNumber}}
	\ChooseQuestions{\arabic{Given@ProblemNumber}}
	\problemToFindtrue% We want to pull problems from this file by definition.
		\ifVerbose There is a question to Find (questionFindtrue)\\ \fi

\else% Worrying about finding a problem only makes sense if we aren't pulling every file.
	\ifVerbose The end ref is currently \arabic{Problem@EndRef}.\\ \fi

	\ifnum\value{Problem@EndRef}>0% We only want to look for problems if we haven't already found them all.
	
		\ifquestionPull% Check to see if we're trying to pull problems at all
			\ifVerbose We are now checking that this file contains problems in our range. \\ \fi
			
			\setcounter{Problem@Range}{\arabic{Question@CurNumber}}% If so, set the increased range to be how far we've currently looked
			\addtocounter{Problem@Range}{#1}% Add how much further we are going in this file.
			
			\ifnum\value{Problem@Range}>\value{Problem@NextRef}
				\problemToFindtrue
					\ifVerbose There is a question to Find (questionFindtrue)\\ \fi
			\else
				\addtocounter{Question@CurNumber}{#1}
			\fi
		\fi
	\fi
\fi
%\problemToFindtrue
}

\newcommand{\ProblemFileFooter}{%
\problemToFindfalse
\ifPerFileQ
\setcounter{Question@CurNumber}{0}
\questionPullfalse
\fi
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%			Randomize Question Choice Code			%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\ChooseQuestions}[1]{% Decides which problems to choose
	\gen@UniqueNum{#1}{1}{\arabic{Total@Question}}{Question@Location}% Determine which problems to call at random. Assign them to the "Question@Location\Roman{}" Counters
	\questionPulltrue% Now we're pulling questions
		\ifVerbose We should now be Pulling Questions (questionPulltrue)\\ \fi
	\setcounter{Problem@RemainToCheck}{\arabic{Given@ProblemNumber}}
	\setcounter{Problem@EndRef}{\arabic{Given@ProblemNumber}}
	\stepcounter{Problem@RemainToCheck}
	\setcounter{Problem@NextRef}{\arabic{Question@Location\Roman{Problem@EndRef}}}
	\ifVerbose 	Problems That Remain to Check \arabic{Problem@RemainToCheck}\\
				End Reference pointer: \arabic{Problem@EndRef}\\
				I think our first problem is \arabic{Problem@NextRef}\\
				I think our ending reference is \arabic{Problem@EndRef}\\
				\fi

}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%  Random Permutation Command  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\newcommand{\@genrand}[3] %\@genrand{NAME}{MIN}{MAX} generates a random number before MIN and MAX and stores it in the command \NAME.
{
%\stepcounter{LogicChecks}
\expandafter\pgfmathrandominteger\csname #1\endcsname{#2}{#3}
\setcounter{#1}{\csname #1\endcsname}
}



\newcommand{\Knuth@Shuffle}[3]% \Knuth@Shuffle{MAXCOUNT}{NAME}{USEDCOUNT} Generates and permutes a list MAXCOUNT number of counters, each with name NAMEI, NAMEII, NAMEIII, ..., NAME\Roman(MAXCOUNT). Then it stores up to USEDCOUNT of those counters in counters named 
{
%Assign a maximum on how many numbers to pick. Set default to the max list size, and save in counter "RndQuant"
%\stepcounter{LogicChecks}
\ifthenelse{\isempty{#3}}%			Check to see if Desired Maximum is given.
	{
%\stepcounter{LogicChecks}
	\setcounter{Rnd@Quant}{#1+1}		%If not, use all of them.
	}
	{
%\stepcounter{LogicChecks}
	\ifthenelse{#1 < #3}
		{
%\stepcounter{LogicChecks}
		\setcounter{Rnd@Quant}{#1+1}		%Only select up to all problems.
		}
		{
%\stepcounter{LogicChecks}
		\setcounter{Rnd@Quant}{#3+1}		
		}
	}

\setcounter{Rnd@EndQuant}{#1+1}
%\stepcounter{LogicChecks}

%Generate a starting list of numbers 1 to maximum number given.
\forloop{Iteration@1}{1}{\arabic{Iteration@1} < \arabic{Rnd@EndQuant}}
	{
%\stepcounter{LogicChecks}
	\@ifundefined{c@#2\Roman{Iteration@1}}	% Check to see if counter exists
		{									%If not, make it.
%\stepcounter{LogicChecks}
		\newcounter{#2\Roman{Iteration@1}}
		}
		{}									%If so, do nothing.
	\setcounter{#2\Roman{Iteration@1}}{\arabic{Iteration@1}}	% Set Counter to next number.
	}

%Permute using Knuth method
\forloop{Iteration@1}{1}{\arabic{Iteration@1} < \arabic{Rnd@Quant}}
	{
%\stepcounter{LogicChecks}
	\@genrand{Temp@RandMe}{\arabic{Iteration@1}}{#1}%	Generate a random number from Current iterate number to maximum number.

	\setcounter{Temp@Hold}{\arabic{#2\Roman{Temp@RandMe}}}%	Set a temp variable so that we can swap values in position of the iterate and the random number selected. 

	\setcounter{#2\Roman{Temp@RandMe}}{\arabic{#2\Roman{Iteration@1}}}% Set the final counter to the value of the variable in the generated number's counter.
	\setcounter{#2\Roman{Iteration@1}}{\arabic{Temp@Hold}}%	Set current counter to the swapped counter.

	\ifthenelse{\arabic{Temp@Hold} > \arabic{Last@Question}} %If we have a new last question, record placement.
		{
		\setcounter{Last@Question}{\arabic{Temp@Hold}}
%\stepcounter{LogicChecks}
		}
		{}%	Else, do nothing.	
	}
\stepcounter{Last@Question}	%Step the Last@Question position for < sign.
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%  	Filter Question Command  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\newcommand{\Master@Input@Test}{%	Input only relevant files.
\ifVerbose I tried to run Master Input Test \fi

\SearchForTag{Topic@Limit}{
	\ifVerbose 
	I detected that I should input the Limit-Input file 
		\ifquestionCount 
			in order to get question counts!\\
		\else
			in order to find problems!\\
		\fi	
	\fi
	\input{/home/jason/texmf/tex/Questions/Limit-Input}
%	\expandafter\input{\QBank@loc Limit-Input}
	}

\SearchForTag{Topic@Derivative}{
	\ifVerbose 
		I detected that I should input the Derivative-Input file 
		\ifquestionCount 
			in order to get question counts!\\
		\else
			in order to find problems!\\
		\fi	
	\fi
\expandafter\input{\QBank@loc Derivative-Input}
	}

\SearchForTag{Topic@Integral}{
	\ifVerbose 
		I detected that I should input the Integral-Input file 
		\ifquestionCount 
			in order to get question counts!\\
		\else
			in order to find problems!\\
		\fi	
	\fi
\expandafter\input{\QBank@loc Integral-Input}
	}

\SearchForTag{Topic@Sequence}{
        \ifVerbose 
                I detected that I should input the Integral-Input file 
                \ifquestionCount 
                        in order to get question counts!\\
                \else
                        in order to find problems!\\
                \fi     
        \fi
\expandafter\input{\QBank@loc Sequence-Input}
        }

\SearchForTag{Topic@Series}{
        \ifVerbose 
                I detected that I should input the Integral-Input file 
                \ifquestionCount 
                        in order to get question counts!\\
                \else
                        in order to find problems!\\
                \fi     
        \fi
\expandafter\input{\QBank@loc Series-Input}
        }

%\SearchForTag{Topic@Limit-Imp}{
%	\ifVerbose 
%		I detected that I should input the Integral-Input file 
%		\ifquestionCount 
%			in order to get question counts!\\
%		\else
%			in order to find problems!\\
%		\fi	
%	\fi
%	\expandafter\input{\QBank@loc Limit-Imp-Input}
%	}
%
%\SearchForTag{Topic@Derivative-Imp}{
%	\ifVerbose 
%		I detected that I should input the Integral-Input file 
%		\ifquestionCount 
%			in order to get question counts!\\
%		\else
%			in order to find problems!\\
%		\fi	
%	\fi
%	\expandafter\input{\QBank@loc Derivative-Imp-Input}
%	}
%
%\SearchForTag{Topic@Integral-Imp}{
%	\ifVerbose 
%		I detected that I should input the Integral-Input file 
%		\ifquestionCount 
%			in order to get question counts!\\
%		\else
%			in order to find problems!\\
%		\fi	
%	\fi
%	\expandafter\input{\QBank@loc Integral-Imp-Input}
%	}
%
%\SearchForTag{Topic@Limit-Multi}{
%	\ifVerbose 
%		I detected that I should input the Integral-Input file 
%		\ifquestionCount 
%			in order to get question counts!\\
%		\else
%			in order to find problems!\\
%		\fi	
%	\fi
%	\expandafter\input{\QBank@loc Limit-Multi-Input}
%	}
%
%\SearchForTag{Topic@Derivative-Multi}{
%	\ifVerbose 
%		I detected that I should input the Integral-Input file 
%		\ifquestionCount 
%			in order to get question counts!\\
%		\else
%			in order to find problems!\\
%		\fi	
%	\fi
%	\expandafter\input{\QBank@loc Derivative-Multi-Input}
%	}
%
%\SearchForTag{Topic@Integral-Multi}{
%	\ifVerbose 
%		I detected that I should input the Integral-Input file 
%		\ifquestionCount 
%			in order to get question counts!\\
%		\else
%			in order to find problems!\\
%		\fi	
%	\fi
%	\expandafter\input{\QBank@loc Integral-Multi-Input}
%	}

}% End of master input test command


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%  	Select Questions Command  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\Make@Counter}[1]{
	\@ifundefined{c@#1}	% Check to see if counter exists
		{									%If not, create it.
		\newcounter{#1}
		}
		{									%If so, reset to 0.
		\setcounter{#1}{0}
		}
}


\newcommand{\gen@UniqueNum}[5][Default@genUniqueNum]{%This is designed to generate a number of random numbers in a range that are all different, in (reverse) order.
	%	#1 is optional and is the name of the counter keeping track of the vector length. In case we want to concatonate.
	%	#2 is how many we want
	%	#3 is the minimum value
	%	#4 is the Maximum value
	%	#5 is the name of the storage command
	\setcounter{Default@genUniqueNum}{0}% Reset the default
	\setcounter{Temp@1}{#2}
	\stepcounter{Temp@1}
\forloop{Iteration@1}{1}{\arabic{Iteration@1} < \arabic{Temp@1}}
	{
	\stepcounter{#1}
%\stepcounter{LogicChecks}
	\Make@Counter{#5\Roman{#1}}	% Check to see if counter exists
	\Make@Counter{Temp\Roman{#1}}	% Check to see if counter exists
	

	\@genrand{Temp@2}{#3}{#4}
	\ifVerbose{You chose question number \arabic{Temp@2}}\fi
	\forloop{Iteration@2}{1}{\arabic{Iteration@2} < \arabic{Iteration@1}}{%
		\ifnum\value{Temp@2}=\value{Temp\Roman{Iteration@2}}% Check to see if the counter matches any previous counter
		\@genrand{Temp@2}{#3}{#4}% If so, fix it.
		\setcounter{Iteration@2}{1}% Reset the check counter so we can check if the new number is used.
		\fi
		}% Currently only check once per number so you may get unlucky. Don't know of a way to build this with a while command.
	\setcounter{Temp\Roman{#1}}{\arabic{Temp@2}}% Save (unsorted) value in a temp list of variables.

	\ifVerbose (Unordered) We want questions number \arabic{Temp@2} \fi

	}
	% Now we want to sort the list	
	\setcounter{Placement@1}{\arabic{Temp@1}}% Reset the placement variable
	\Make@Counter{Temp\Roman{Placement@1}}% 
\forloop{Iteration@3}{1}{\arabic{Iteration@3}<\arabic{Temp@1}}
	{% For each variable
		\setcounter{Temp\Roman{Placement@1}}{0}
	
		\forloop{Iteration@4}{1}{\arabic{Iteration@4}<\arabic{Temp@1}}
			{
			\ifnum\value{Temp\Roman{Iteration@4}}>\value{Temp\Roman{Placement@1}}
				\setcounter{Placement@1}{\arabic{Iteration@4}}% Keep track of which one was the largest so far
			\fi
			}

		\setcounter{#5\Roman{Iteration@3}}{\arabic{Temp\Roman{Placement@1}}}% Set the final counter.
		\expandafter\edef\csname #5\Roman{Iteration@3}\endcsname{\arabic{#5\Roman{Iteration@3}}}% Define it with the immediate value.
		
		\ifVerbose (Ordered) We want question number \arabic{#5\Roman{Iteration@3}} \fi
	}
}
	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%  	Display Question Command  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\listQuestions}{
		%%%%% Now we display the problems. Currently this will shuffle the problems by default. I may deacitvate this once the "shuffle" environment is fully functional.

	\Knuth@Shuffle{\arabic{Problem@TotalToList}}{Shuffle@Position@}{\arabic{Problem@TotalToList}}% Create random ordering for the questions about to be displayed.
	\stepcounter{Problem@TotalToList}% Step the total number of problems to list by 1 so that we can use <

	\forloop{Iteration@1}{1}{\arabic{Iteration@1} < \arabic{Problem@TotalToList}}
		{
		\expandafter\csname Question@Display\roman{Problem@GroupingNumber}\Roman{Shuffle@Position@\Roman{Iteration@1}}\endcsname% Display questions in the randomized order
		}
	\setcounter{Problem@TotalToList}{0}
	\stepcounter{Problem@GroupingNumber}
	\setcounter{Question@DisplayCounter}{0}
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%			User Selection Question Command			%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\newcommand{\QuestionSelect}[4][]{% This is the master user command to call questions
		% #1 is optional and is the "Per File Flag"
		% #2 is the Topic
		% #3 is the secondary criteria, like sub@rational
		% #4 is the number of questions we want to pull (either in total or per file)
		% First we set up how many problems we are pulling, either in total or per file.
	\setcounter{Given@ProblemNumber}{#4}

       %%%%%% Set Tags that have been given;
		%Start by resetting tags from any previous command usage	
		%Now set the active tags that are given.
	\set@StrictActiveTags{#2}% The topic is necessary, so it is strict
	\set@RelaxActiveTags{#3}% The secondaries are relaxed by default
%	\addTo@RelaxActiveTags{#2}% Strict tags are also relax tags.


		%%%%% Set whether we are doing "per file" questions, or just grabbing them from the full list.
	\ifthenelse{\isempty{#1}}{% Check if we have anything in the optional category. If not we want to set PerFileQ flag to be false.
	\PerFileQfalse % Set flag false
	\setcounter{Problem@ToList}{#4}% Since we are not pulling per file we only want #4 amount of problems.
	}
	{% Otherwise we are pulling per file.
	\PerFileQtrue
	\setcounter{Problem@ToList}{0}% Since we are pulling per file this will be calculated as we go.
	}
	

		%%%%% Now we need to select the problems
%	\input{Master-Input-List}% Testing file; Get problem counts and assign them if we're pulling per file.
	\Master@Input@Test% Get problem counts and assign them if we're pulling per file.
	
	\ifVerbose I Just did the first master pull and found a total of \arabic{Total@Question} questions\fi

	\ifPerFileQ% The problems have already been assigned if this flag is active, so we don't need to do much.
		\stepcounter{Problem@ToList}% Only need to step the final problem counter for the < sign
		\ifVerbose I think I'm pulling \arabic{Given@ProblemNumber} questions \textbf{per file} \fi
	\else% If the flag is false then we need to use the counts to get problems and assign them to commands.
		\questionCountfalse% We are no longer just counting problems.
			\ifVerbose I think I'm pulling \arabic{Given@ProblemNumber} questions \textbf{in total} \fi

		\ChooseQuestions{#4}
		\stepcounter{Problem@ToList}% Only need to step the final problem counter for the < sign

		\Master@Input@Test% Now we're pulling the latexProblemContent commands, not just question counts
%		\input{Master-Input-List}% Testing File
		\ifVerbose I just did the second Master Pull\fi

	\fi
	% Now we have pulled and assigned problems to commands of the form \Question@Display\Roman{Question@DisplayCounter}

	\addtocounter{Problem@TotalToList}{\arabic{Problem@ToList}}
		%%%%%  Reset all counters
	\setcounter{Total@Question}{0}% Reset counters
	\setcounter{Problem@ToList}{0}
	\setcounter{Question@CurNumber}{0}
	\questionCounttrue
	\questionPullfalse
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%		   Practice Select Question Command			%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%		   		findQuestion Command				%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%The intent of the \findQuestion command is to be able to find all questions associated with a given set of tags.
\newcommand{\findQuestion}[4]{
\findingQuestiontrue

\set@RelaxActiveTags{}
\set@StrictActiveTags{}

\ifthenelse{\isempty{#1}}
	{
	\expandafter\addTo@RelaxActiveTags\TagList@MasterCatOne
	}
	{
	\addTo@RelaxActiveTags{#1}
	}

\ifthenelse{\isempty{#2}}
	{
	\expandafter\addTo@RelaxActiveTags\TagList@MasterCatTwo
	}
	{
	\addTo@RelaxActiveTags{#2}
	}

\ifthenelse{\isempty{#3}}
	{
	\expandafter\addTo@RelaxActiveTags\TagList@MasterCatThree
	}
	{
	\addTo@RelaxActiveTags{#3}
	}

\ifthenelse{\isempty{#4}}
	{
	\expandafter\addTo@RelaxActiveTags\TagList@MasterCatFour
	}
	{
	\addTo@StrictActiveTags{#4}
	}
\Master@Input@Test

\findingQuestionfalse
}




